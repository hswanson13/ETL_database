

def get_column_names(table,cursor):
    #get all the column names
    column_names_query = f"""
    SELECT column_name, data_type
    FROM information_schema.columns
    WHERE table_name = '{table}'
    ;
    """
    cursor.execute(column_names_query)
    #cursor.execute(data_type_columns_query)
    column_names = cursor.fetchall()
    
    #remove autogenerated columns, just id and timestamps
    cols = [c for c in column_names if c[0] != 'id' if c[1] != 'timestamp without time zone']
    return cols
            
def add_data(table,column_names, input_data,cursor):

    str_cols = ",".join([c[0] for c in column_names]) #list comprehension because it is a list of tuples (name,data_type)
    flags = ('%s,'*len(input_data))[:-1] #:-1 removes the last comma
    tup_input_data = tuple(input_data)

    add_data_query = f"""
    INSERT INTO "{table}" ({str_cols})
    VALUES ({flags})
    """
    cursor.execute(add_data_query,tup_input_data)
    return

def get_user(cursor):
    accountFound = False
    while accountFound == False:
    #check username and password and make sure they are correct
        username = input('Input username: ')
        password = input('Input password: ') #should use getpass but for now it is fine

        validate_user_query = f'SELECT "id",username, password FROM "user" WHERE username=%s AND password=%s'
        cursor.execute(validate_user_query, (username,password))
        account = cursor.fetchall() #if empty then they typed wrong password or username

        if len(account) == 0:
            print("username or password incorrect")
            continue
        else:
            accountFound=True

    return account[0][0]
            
def find_id(table,column,cursor):
    columnFound = False
    while columnFound == False:
        column_input = input(f'Input {column}: ')
        if column_input == '': #if you do not need one don't input anything! rely on NOT NULL constraint!
            return None
        find_id_query = f'SELECT "id" FROM "{table}" WHERE {column}=%s'
        cursor.execute(find_id_query,(column_input,))
        id = cursor.fetchall()

        if len(id) == 0:
            print(f"{column_input} does not exist in database")
            continue
        else:
            columnFound = True
    
    return id[0][0] #integer!


def check_serial_number(table,serial_column,cursor):
    #takes input serial number and checks it is doesn't excist already!
    unique = False
    while unique == False:

        test_serial = input(f"Input {serial_column} : ")

        check_unique_module_query = f"""
        SELECT {serial_column} FROM "{table}";
        """
        cursor.execute(check_unique_module_query)
        all_serial_nums = [i[0] for i in cursor.fetchall()]

        if test_serial not in all_serial_nums:
            unique=True
        else:
            print("component already exists, try again")
        
    return test_serial